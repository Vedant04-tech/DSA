#include <iostream>
using namespace std;
/*
3.Beginning with an empty binary search tree,Construct binary search tree by inserting the values in the order given. 
After constructing a binary tree-i. Insert new nodei.Findnumber ofnodesinlongest path 
i. Minimum datavalue found in the tree iv.Change atree so that the roles ofthe left and right pointers are swapped at every node v. Search avalue
*/
class Node{
	public:
		int data;
		Node* left;
		Node* right;
		Node(int key){
			data= key;
			left= right= NULL;
		}
};

class BST{
	public:
		Node* insert(Node* root, int key){
			if(!root) return new Node(key);
			if(key< root->data)
				root->left = insert(root->left, key);
			else
				root->right = insert(root->right, key);
			return root;
		}
		
		int height(Node* root){
			if(!root) return 0;
			return max(height(root->left), height(root->right)) + 1;
		}
		
		int findMin(Node* root){
			while(root && root->left)
				root= root->left;
			return root ? root->data : -1;
		}
		
		void mirror(Node* root){
			if(!root) return;
			swap(root->left, root->right);
			mirror(root->left);
			mirror(root->right);
		}
		
		Node* search(Node* root, int key){
			if(!root || root->data == key) return root;
			if(key< root->data)
				return search(root->left, key);
			return search(root->right, key);
		}
		
		void inorder(Node* root){
			if(!root) return;
			inorder(root-> left);
			cout<< root->data << " ";
			inorder(root-> right);
		}
};

int main(){
	BST bst;
	Node* root= NULL;
	int n, val;
	
	cout<< "Enter no. of Nodes: ";
	cin>> n;
	cout<< "Enter values: ";
	for(int i=0; i<n; i++){
		cin>> val;
		root= bst.insert(root, val);
	}
	
	cout << "Enter new value to insert: ";
    cin >> val;
    root = bst.insert(root, val);
    
    cout<< "Height of Tree: "<< bst.height(root)<< endl;
    cout<< "Minimum Value: "<< bst.findMin(root)<< endl;
    
    bst.mirror(root);
    cout<< "Inorder after mirror: ";
    bst.inorder(root);
    cout<< endl;
    
    cout << "Enter value to search: ";
    cin >> val;
    if (bst.search(root, val))
        cout << "Value " << val << " found.\n";
    else
        cout << "Value " << val << " not found.\n";
        
	return 0;
}