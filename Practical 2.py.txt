Practical 2.py
class HashDict:
    def __init__(self, size=10):
        self.size = size
        self.table = [[] for _ in range(size)]

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        i = self._hash(key)
        for idx, (k, v) in enumerate(self.table[i]):
            if k == key:
                self.table[i][idx] = (key, value)
                print("Updated existing key.")
                return
        self.table[i].append((key, value))
        print("Inserted new key.")

    def find(self, key):
        i = self._hash(key)
        for k, v in self.table[i]:
            if k == key:
                print(f"{key}: {v}")
                return
        print("Key not found.")

    def delete(self, key):
        i = self._hash(key)
        for idx, (k, _) in enumerate(self.table[i]):
            if k == key:
                del self.table[i][idx]
                print("Key deleted.")
                return
        print("Key not found.")

    def display(self):
        print("\n--- Dictionary Contents ---")
        for i, bucket in enumerate(self.table):
            print(f"{i}: {bucket if bucket else 'Empty'}")

def main():
    d = HashDict()

    while True:
        print("\n1. Insert\n2. Find\n3. Delete\n4. Display\n5. Exit")
        choice = input("Enter choice: ")

        if choice == '1':
            key = input("Enter key: ")
            value = input("Enter value: ")
            d.insert(key, value)
        elif choice == '2':
            key = input("Enter key to find: ")
            d.find(key)
        elif choice == '3':
            key = input("Enter key to delete: ")
            d.delete(key)
        elif choice == '4':
            d.display()
        elif choice == '5':
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()
