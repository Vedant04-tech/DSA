#include <iostream>
#include <unordered_map>
#include <list>
#include <queue>
using namespace std;

class Graph {
    unordered_map<string, list<string>> adj;

public:
    void addEdge(string u, string v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    void DFS(string start) {
        unordered_map<string, bool> visited;
        DFSUtil(start, visited);
        cout << endl;
    }

    void DFSUtil(string node, unordered_map<string, bool>& visited) {
        visited[node] = true;
        cout << node << " ";
        for (auto& neighbor : adj[node]) {
            if (!visited[neighbor])
                DFSUtil(neighbor, visited);
        }
    }

    void BFS(string start) {
        unordered_map<string, bool> visited;
        queue<string> q;
        q.push(start);
        visited[start] = true;

        while (!q.empty()) {
            string node = q.front(); q.pop();
            cout << node << " ";
            for (auto& neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        cout << endl;
    }
};

int main() {
    Graph g;
    g.addEdge("MainGate", "Library");
    g.addEdge("Library", "Cafeteria");
    g.addEdge("Cafeteria", "Auditorium");
    g.addEdge("Auditorium", "Hostel");
    g.addEdge("Hostel", "Gym");
    g.addEdge("Gym", "MainGate");

    cout << "DFS from MainGate: ";
    g.DFS("MainGate");

    cout << "BFS from MainGate: ";
    g.BFS("MainGate");

    return 0;
}
